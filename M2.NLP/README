Une première étape est d'utiliser la Latent Dirichlet Allocation (LDA) sur l'abstract d'un ensemble d'article.
L'abstract est disponible sans passer par la lecture du pdf.
Au besoin on pourrait ajouter les titres de sections, les mots-clés, voire les termes en majuscules

source :
cours ML
https://towardsdatascience.com/end-to-end-topic-modeling-in-python-latent-dirichlet-allocation-lda-35ce4ed6b3e0 +++
https://larevueia.fr/latent-dirichlet-allocation-topic-modeling-en-python/ +++ fr
https://larevueia.fr/latent-dirichlet-allocation-topic-modeling-en-python/ +++ fr
https://www.analyticsvidhya.com/blog/2021/07/topic-modelling-with-lda-a-hands-on-introduction/
https://www.analyticsvidhya.com/blog/2021/06/part-3-topic-modeling-and-latent-dirichlet-allocation-lda-using-gensim-and-sklearn/
https://medium.com/@prashanthsri12/topic-modeling-in-python-using-latent-dirichlet-allocation-lda-61001ba51124 +++
https://linogaliana-teaching.netlify.app/lda/
https://www.kdnuggets.com/2019/09/overview-topics-extraction-python-latent-dirichlet-allocation.html


outils :
Gensim and Sklearn
import nltk
from nltk.corpus import stopwords  #stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
stop_words=set(nltk.corpus.stopwords.words('english'))


methode :
tester l'algo sur des articles pour lesquels on a déjà les mots-clé ?
=> faire une fonction de nettoyage des mots clés.